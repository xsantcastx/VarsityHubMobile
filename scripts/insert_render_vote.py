# -*- coding: utf-8 -*-
from pathlib import Path

path = Path('app/game-details/GameDetailsScreen.tsx')
text = path.read_text()
if 'const renderVoteSection' in text:
    raise SystemExit(0)
marker = '  const renderBanner = () => {\n'
if marker not in text:
    raise SystemExit('renderBanner marker missing')
render_fn = "  const renderVoteSection = () => {\n    if (!vm?.gameId) return null;\n    const summary = voteSummary;\n    const hasVotes = !!summary && summary.total > 0;\n    const pctA = hasVotes ? summary.pctA : 50;\n    const pctB = hasVotes ? summary.pctB : 50;\n    const percentALabel = summary ? ${summary.pctA}% : '--';\n    const percentBLabel = summary ? ${summary.pctB}% : '--';\n    const totalLabel = summary ? ${summary.total} vote : '0 votes';\n    const statusLabel = summary\n      ? summary.userVote\n        ? Your pick: \n        : \"You haven't voted\"\n      : 'Loading votes...';\n    const caption = summary ? ${totalLabel} \u2022  : statusLabel;\n    const pressDisabled = Boolean(vm?.isPast) || voteBusy;\n    const selectedTeam = summary?.userVote ?? null;\n    const trackFlexA = pctA === 0 && pctB === 0 ? 1 : Math.max(pctA, 0.1);\n    const trackFlexB = pctA === 0 && pctB === 0 ? 1 : Math.max(pctB, 0.1);\n\n    return (\n      <View style={styles.voteSection}>\n        <View style={styles.voteChipRow}>\n          <Pressable\n            style={[\n              styles.voteChip,\n              selectedTeam === 'A' ? styles.voteChipSelected : null,\n              pressDisabled ? styles.voteChipDisabled : null,\n            ]}\n            onPress={() => handleVote('A')}\n            onLongPress={selectedTeam === 'A' ? handleClearVote : undefined}\n            delayLongPress={300}\n            disabled={pressDisabled}\n          >\n            <View style={styles.voteChipContent}>\n              <Text style={[styles.voteChipLabel, selectedTeam === 'A' ? styles.voteChipLabelSelected : null]}>{teamALabel}</Text>\n              <Text style={[styles.voteChipPercent, selectedTeam === 'A' ? styles.voteChipLabelSelected : null]}>{percentALabel}</Text>\n            </View>\n          </Pressable>\n          <Pressable\n            style={[\n              styles.voteChip,\n              selectedTeam === 'B' ? styles.voteChipSelected : null,\n              pressDisabled ? styles.voteChipDisabled : null,\n            ]}\n            onPress={() => handleVote('B')}\n            onLongPress={selectedTeam === 'B' ? handleClearVote : undefined}\n            delayLongPress={300}\n            disabled={pressDisabled}\n          >\n            <View style={styles.voteChipContent}>\n              <Text style={[styles.voteChipLabel, selectedTeam === 'B' ? styles.voteChipLabelSelected : null]}>{teamBLabel}</Text>\n              <Text style={[styles.voteChipPercent, selectedTeam === 'B' ? styles.voteChipLabelSelected : null]}>{percentBLabel}</Text>\n            </View>\n          </Pressable>\n        </View>\n        <View style={styles.voteBar}>\n          <View style={[styles.voteBarFillA, { flex: trackFlexA }]} />\n          <View style={[styles.voteBarFillB, { flex: trackFlexB }]} />\n        </View>\n        <Text style={styles.voteCaption}>{caption}</Text>\n      </View>\n    );\n  };\n\n"
text = text.replace(marker, render_fn + marker)
path.write_text(text)
