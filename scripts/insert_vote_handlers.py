from pathlib import Path

path = Path('app/game-details/GameDetailsScreen.tsx')
text = path.read_text()
if 'const handleVote = useCallback' in text:
    raise SystemExit(0)
marker = "  const scrollToSection = useCallback(\n    (key: SectionKey) => {\n      setActiveSection(key);\n      requestAnimationFrame(() => {\n        const offset = sectionOffsets.current[key === 'media' ? 'media' : 'posts'];\n        scrollRef.current?.scrollTo({ y: Math.max(0, offset - 64), animated: true });\n      });\n    },\n    [],\n  );\n\n"
if marker not in text:
    raise SystemExit('marker not found for vote handlers')
handlers = "  const handleVote = useCallback(\n    async (team: VoteOption) => {\n      if (!vm?.gameId || vm.isPast || voteBusy) return;\n      const previous = voteSummary ? { ...voteSummary } : null;\n      const baseline = voteSummary ?? buildVoteSummary(0, 0, null);\n      if (baseline.userVote === team) {\n        return;\n      }\n      let nextA = baseline.teamA;\n      let nextB = baseline.teamB;\n      if (baseline.userVote === 'A') nextA = Math.max(0, nextA - 1);\n      if (baseline.userVote === 'B') nextB = Math.max(0, nextB - 1);\n      if (team === 'A') nextA += 1; else nextB += 1;\n      setVoteSummary(buildVoteSummary(nextA, nextB, team));\n      setVoteBusy(true);\n      try {\n        const res: any = await Game.castVote(vm.gameId, team);\n        setVoteSummary(parseVoteSummary(res));\n      } catch (err: any) {\n        if (previous) setVoteSummary(previous); else setVoteSummary(null);\n        if (err?.status === 401) {\n          router.push('/sign-in');\n        } else {\n          console.error('Failed to submit vote', err);\n          Alert.alert('Vote', 'Unable to update your vote right now. Please try again.');\n        }\n      } finally {\n        setVoteBusy(false);\n      }\n    },\n    [vm?.gameId, vm?.isPast, voteBusy, voteSummary, router],\n  );\n\n  const handleClearVote = useCallback(async () => {\n    if (!vm?.gameId || vm.isPast || voteBusy || !voteSummary?.userVote) return;\n    const previous = { ...voteSummary };\n    const nextA = voteSummary.userVote === 'A' ? Math.max(0, voteSummary.teamA - 1) : voteSummary.teamA;\n    const nextB = voteSummary.userVote === 'B' ? Math.max(0, voteSummary.teamB - 1) : voteSummary.teamB;\n    setVoteSummary(buildVoteSummary(nextA, nextB, null));\n    setVoteBusy(true);\n    try {\n      const res: any = await Game.clearVote(vm.gameId);\n      setVoteSummary(parseVoteSummary(res));\n    } catch (err: any) {\n      setVoteSummary(previous);\n      if (err?.status === 401) {\n        router.push('/sign-in');\n      } else {\n        console.error('Failed to clear vote', err);\n        Alert.alert('Vote', 'Unable to update your vote right now. Please try again.');\n      }\n    } finally {\n      setVoteBusy(false);\n    }\n  }, [vm?.gameId, vm?.isPast, voteBusy, voteSummary, router]);\n\n"
text = text.replace(marker, marker + handlers)
path.write_text(text)
