MatchBanner Redesign Checklist
==============================

Goal: Rebuild the matchup banner so it feels like a game-night broadcast open ? bold team presence, kinetic light, and a premium hero feel.

Implementation tasks
--------------------
1. Define energized color system
   - Use team colors when available and blend with fallback gradients.
   - Create opposing diagonal light streaks and glow layers.
2. Rework layout structure
   - Move to split-layer background with angled mask and glass center plate.
   - Elevate team crests/photos with depth, add subtle parallax offsets.
   - Introduce hero headline row with division line and VS badge centerpiece.
3. Motion polish
   - Add pulsing rim light around VS badge.
   - Layer moving highlight sweeps / particle flickers that loop softly.
   - Keep animations accessibility-aware (respect reduce motion).
4. Scoreboard details
   - Add optional meta row for league / kickoff info.
   - Ensure typography scales for compact and hero variants.
5. QA / follow-up
   - Verify on light/dark, web/native, hero + compact variants.
   - Smoke test capture component that reuses MatchBanner.

Progress Tracker
----------------
- Current focus: Overlay helper/component scaffolded; prepping validation + visual tweaks.
- Next up: Verify overlay reduce-motion/capture parity, then pivot to layout restructuring plan for `MatchBanner.tsx`.

Action Breakdown
----------------
1. Color system
   - [x] Inventory team color sources (team API, `teamMatch.ts`, fallback tokens) and capture gaps.
   - [x] Draft palette resolver (`resolveMatchBannerPalette`) spec covering API colors + logo sampling fallback.
   - [x] Document helper inputs (team data, appearance preset, overrides) and outputs (background gradient, crest glow, text colors).
   - [x] Outline flow: server-provided palette -> logo sampling -> fallback presets with weighting by team slot (home/away).
   - [x] Call out integration touchpoints (MatchBanner, MatchBannerCapture, QuickAdd preview, feed hero).
   - [x] Design fallback gradient pairs for teams without full palettes (light/dark).
   - [ ] Prototype diagonal streak and glow overlays using gradient tokens.
     - [x] Create `resolveMatchBannerPalette.ts` helper stub returning gradient, streak, glow colors.
     - [x] Add `MatchBannerOverlayLayer` component wired to palette helper and reduce-motion guard.
     - [x] Wire helper + overlay into `MatchBanner.tsx` and capture component for parity.
     - [ ] Validate on iOS/Android simulators and confirm capture output consistency.
   - [x] Define gradient families with example color stops (Blaze, Midnight, Neon, Frost) for light/dark modes.
   - [x] Capture rules for picking gradient family based on team brand keywords or fallback rotation.
   - [x] Note glow layer base colors per family (VS rim, streak, vignette) for implementation handoff.
   - [x] Document accessibility checks (contrast, reduce motion toggles).

2. Layout structure
   - [ ] Sketch split-layer background and glass plate treatment for implementation in `MatchBanner.tsx`.
   - [ ] Define props/state needed to support parallax offsets and crest elevation.
   - [ ] Plan responsive behavior for hero versus compact variants.

3. Motion polish
   - [ ] Audit existing animation assets (`sparkle_*.json`, `MatchBannerLottie.tsx`) for reuse.
   - [ ] Define pulsing rim light effect around VS badge with reduce-motion guard.
   - [ ] Outline light sweep and particle loop timeline (duration, easing).

4. Scoreboard details
   - [ ] List metadata fields for optional league/kickoff row and map to data sources.
   - [ ] Check typography scale tokens for hero and compact scoreboard variants.

5. QA / follow-up
   - [ ] Build QA matrix covering light/dark, web/native, and capture component use.
   - [ ] Schedule smoke test of `MatchBannerCapture.tsx` once visual revamp lands.

Gradient Family Reference
------------------------
- Blaze (light): `#ff6b3d -> #f43f5e`; high-energy tip-off, warm amber streak, rim glow `#ffd29d`.
- Blaze (dark): `#8b1d3b -> #ef4444`; deep crimson base, rim glow `#ff8ba4`, streak `#f97316`.
- Midnight (light): `#1d4ed8 -> #312e81`; cool night gradient, rim glow `#60a5fa`, streak `#93c5fd`.
- Midnight (dark): `#020617 -> #1d1b4b`; subtle navy wash, rim glow `#5b21b6`, streak `#2563eb`.
- Neon (light): `#22d3ee -> #a855f7`; vibrant alt-sport vibe, rim glow `#cffafe`, streak `#f0abfc`.
- Neon (dark): `#0f172a -> #4c1d95`; electric synthwave, rim glow `#38bdf8`, streak `#fb7185`.
- Frost (light): `#f8fafc -> #e0f2fe`; clean playoff glass, rim glow `#bae6fd`, streak `#e2e8f0`.
- Frost (dark): `#111827 -> #1f2937`; frost-tinted slate, rim glow `#38bdf8`, streak `#94a3b8`.
- Selection: keyword map (e.g. Flames/Heat/Tigers -> Blaze, Knights/Royals -> Midnight, Neon/Sparks -> Neon, Polar/Bears -> Frost); fallback rotation seeded by matchup id.

Overlay Implementation Spike Plan
---------------------------------
- Helper: `app/utils/resolveMatchBannerPalette.ts` exports `resolveMatchBannerPalette({ home, away, appearance, theme, variant, overrides })`.
- Return shape: `{ backgroundGradient, streakGradient, rimGlow, glassTint, accent, isFallback }` plus `motion` config (glowIntensity, sweepDuration).
- Component: `MatchBannerOverlayLayer` consumes palette, renders gradient streak, glow ellipse, optional particles (disable in compact).
- Integration: replace `highlightsContainer` block in `MatchBanner.tsx` with overlay layer; feed same component into capture for parity.
- Testing: story/dev screen toggles to visualize gradient families; record capture output to confirm share fidelity.

Overlay Prototype Notes
-----------------------
- Base streak layer: angled `LinearGradient` set ~25deg with 3-stop alpha ramp (0 -> 0.8 -> 0) driven by palette `streakGradient`.
- Secondary glow: blurred `Animated.View` ellipse using rim glow color with sine-wave opacity (respect reduce-motion).
- Glass plate enhancement: overlay translucent white/black (`rgba(255,255,255,0.08)` light / `rgba(0,0,0,0.24)` dark) clipped with rounded mask.
- Particle accents: optional Lottie or procedural dots tinted to accent; disable in compact variant for clarity.
- Implementation staging: prototype in Storybook-style playground (MatchBanner dev screen) before wiring to production component.

Palette Resolver Spec (Draft)
----------------------------
- Inputs: `team` (id, name, optional `primary_color`/`secondary_color`, logos), `appearancePreset`, optional overrides (`leftColor`, `rightColor`), environment (`theme`, `variant`).
- Processing order:
  1. Use explicit overrides when provided.
  2. If API colors exist, normalize + validate contrast, assign primaries/accent.
  3. Else sample dominant colors from logos (fast average + accent pick).
  4. If sampling fails, pull from gradient family rotation (Blaze/Midnight/Neon/Frost).
- Outputs: `backgroundGradient` (start/end colors), `streakGradient`, `rimGlow`, `glassTint`, `textPalette` (primary/secondary), metadata flags (`isFallback`).
- Hooks: returns animation dial-ins (glow intensity, streak opacity) respecting reduce-motion.
- Integration: consumed by `MatchBanner`, `MatchBannerCapture`, Quick Add preview, feed hero cards.
- Implementation notes: expose helper in `app/utils/resolveMatchBannerPalette.ts`; ensure deterministic rotation seeded by game id for balanced fallback distribution.

Accessibility Guardrails
-----------------------
- Contrast: ensure text on gradients maintains WCAG AA (4.5:1 small, 3:1 large); fallback to darkened plate when contrast dips.
- Reduce motion: gate rim pulse + streak sweep behind `reduceMotionEnabled`; provide static glow fallback.
- Flashing avoidance: keep luminance delta < 80% per cycle and minimum 700ms transitions.
- Color deficiency: avoid red/green pair conflicts by mixing complementary accents (e.g. Blaze overlays lean amber, not pure red).
- Capture parity: run checks in both `MatchBanner` and `MatchBannerCapture` to avoid export-only regressions.

Color System Strategy Draft
---------------------------
- Palette pipeline: expose optional `primary_color`/`secondary_color` on team API; until shipped, sample dominant colors from logos and fall back to curated presets.
- Gradient scaffolding: define light/dark gradient families (e.g. Blaze, Midnight, Neon) and blend with team primaries for streaks and base washes.
- Glow layering: drive diagonal streaks + VS rim glow from brightest accent; drop to neutral glass blue when team colors are missing.
- Token packaging: ship a `resolveMatchBannerPalette` helper returning background stops, crest glows, and text tints for banner + capture reuse.
- Accessibility hooks: bake in min-contrast guardrails and respect reduce-motion by softening animated glow intensity.

Working Notes
-------------
- Peek at `constants/Colors.ts` and `hooks/useCustomColorScheme.tsx` for existing palette helpers.
- Review `MatchBanner.tsx` and `MatchBannerCapture.tsx` to flag structural changes needed for the glass center plate.
- Collect references from current `sparkle_*.json` animations to inform motion direction.
- Color sources check: Banner relies on static fallbacks (#9b1c1c/#0b558d) and light/dark tokens; Prisma `Team` schema currently lacks palette fields.
- Helper/component scaffolded: `app/utils/resolveMatchBannerPalette.ts`, `app/components/MatchBannerOverlayLayer.tsx`.
- `MatchBanner.tsx` overlay now replaces prior `highlightsContainer` reflection stack (lines ~170-210).
- Helper/component scaffolded: `app/utils/resolveMatchBannerPalette.ts`, `app/components/MatchBannerOverlayLayer.tsx`.
- `MatchBanner.tsx` overlay swapped in place of prior `highlightsContainer` block (lines ~170-210).








